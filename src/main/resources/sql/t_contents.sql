INSERT INTO `t_contents`(`cid`, `title`, `slug`, `created`, `modified`, `content`, `author_id`, `type`, `status`, `tags`, `categories`, `hits`, `comments_num`, `allow_comment`, `allow_ping`, `allow_feed`) VALUES (1, 'about my blog', 'about', 1487853610, 1609108741, '   about', 1, 'page', 'publish', NULL, NULL, 609, 560, 1, 1, 1);
INSERT INTO `t_contents`(`cid`, `title`, `slug`, `created`, `modified`, `content`, `author_id`, `type`, `status`, `tags`, `categories`, `hits`, `comments_num`, `allow_comment`, `allow_ping`, `allow_feed`) VALUES (2, 'Study Notes and Summary of Core Techniques of Multithreaded Programming in Java', 'Java-Thread2', 1497322995, 1609108101, '## Chapter 1 - Java Multithreading Skills\r\n\r\nThreads Technical Points.\r\n\r\n+ Starting a thread\r\n+ How to make a thread pause\r\n+ How to stop a thread\r\n+ The priority of threads\r\n+ Thread safety related issues\r\n<! -- more -->\r\n### The concept of processes and threads and the advantages of multi-threading\r\n\r\nProcesses: like the QQ.exe program that runs on our computers, are the basic unit of operation managed by the operating system\r\n\r\nThreads: Sub-tasks that run independently within a process, for example, the QQ.exe process has many threads running, downloading files, sending messages, voice threads, video threads, etc.\r\n\r\nAdvantages of multithreading: our computer can operate different software at the same time, while listening to songs, knocking out code, viewing pdf documents, browsing the web, etc. The CPU keeps switching between these tasks, switching very quickly, so we think they are running at the same time.\r\n\r\n### Using multithreading\r\n\r\n#### Inherits the Thread class\r\n\r\nThe JDK source code comments (Thread.java) are as follows.\r\n\r\n```java\r\nOne is to declare a class to be a subclass (subclass) of <code>Thread</code>. This subclass should override the <code>run</code> method of class <code>Thread</code>. An instance of the subclass can then be allocated and started.\r\nFor example, a thread that computes primes larger than a stated value could be written as follows:\r\n//Inherit the Thread class\r\nclass PrimeThread extends Thread {\r\n         long minPrime;\r\n         PrimeThread(long minPrime) {\r\n          this.minPrime = minPrime;\r\n         }\r\n\r\n         public void run() {\r\n             // compute primes larger than minPrime\r\n             Override the run method of the Thread class\r\n          }\r\n     }\r\n\r\nThe following code would then create a thread and start it running:\r\n// start the thread\r\n    PrimeThread p = new PrimeThread(143);\r\n    p.start();\r\n```\r\n\r\n#### Implementing the Runnable interface\r\n\r\nThe JDK source code comments (Thread.java) are as follows\r\n\r\n```java\r\nThe other way to create a thread is to declare a class that implements the <code>Runnable</code> interface. that class then An instance of the class can then be allocated, passed as an argument when creating\r\n<The same example in this other style looks like the following:\r\n// Implementing the Runnable interface\r\n    class PrimeRun implements Runnable {\r\n        long minPrime;\r\n        PrimeRun(long minPrime) {\r\n            this.minPrime = minPrime;\r\n         }\r\n\r\n         public void run() {\r\n            // compute primes larger than minPrime\r\n            // override the run method\r\n        }\r\n    }\r\n\r\nThe following code would then create a thread and start it running:\r\n// start the thread\r\n     PrimeRun p = new PrimeRun(143);\r\n     new Thread(p).start();\r\n```\r\n\r\n\r\n\r\n### currentThread() method\r\n\r\nThis method returns information about which thread the code segment is being called by.\r\n\r\n### isAlive() method\r\n\r\nDetermines if the current thread is active (started but not terminated)\r\n\r\n### sleep() method\r\n\r\nSleeps (suspends) the current \"active thread (the thread returned by this.currentThread())\" for the specified number of milliseconds.\r\n\r\n### getId() method\r\n\r\nGets the thread\'s unique identifier\r\n\r\n### Stopping a thread\r\n\r\nThe <del>Thread.stop()</del> method can be used, but it is best not to use it as it is unsafe and is deprecated.\r\n\r\nMost stopping a thread is done using the Thread.interrupt() method\r\n\r\n#### determines if the thread is stopped\r\n\r\n+ interrupted()\r\n```java\r\n     // Test if the current thread has been interrupted, the interrupted state of this thread will be cleared by this method.\r\n     //In other words, if this method is called twice in a row, the second time it is called will return false.\r\n     public static boolean interrupted() {\r\n             return currentThread().isInterrupted(true);\r\n     }\r\n```\r\n\r\n+ isInterrupted()\r\n\r\n``` java\r\n        //test if the thread has been interrupted, the state of the thread is not affected by this method\r\n        // Thread interruptions are ignored because threads that are not active under interruption are reflected by this method which returns false\r\n         public boolean isInterrupted() {\r\n                return isInterrupted(false);\r\n        }\r\n        /**\r\n     * Tests if some Thread has been interrupted. the interrupted state\r\n     The interrupted state * is reset or not based on the value of ClearInterrupted that is\r\n     * passed.\r\n     The interrupted state * is reset or not based on the value of ClearInterrupted that is * passed. */\r\n     private native boolean isInterrupted(boolean ClearInterrupted);\r\n```\r\n\r\n#### stopping in slumber\r\n\r\n``` java\r\npublic class MyThread2 extends Thread\r\n{\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            System.out.println(\"run start\");\r\n            Thread.sleep(20000);\r\n            System.out.println(\"run end\");\r\n        } catch (InterruptedException e) {\r\n            System.out.println(\"run catch \"+this.isInterrupted());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        try {\r\n            MyThread2 t2 = new MyThread2();\r\n            t2.start();\r\n            Thread.sleep(200);\r\n            t2.interrupt();\r\n        } catch (InterruptedException e) {\r\n            System.out.println(\"main catch\");\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println(\"main end\");\r\n    }\r\n}\r\n```\r\n\r\nRun the result.\r\n\r\n```java\r\nrun start\r\nmain end\r\nrun catch false\r\njava.lang.InterruptedException: sleep interrupted\r\n	at java.lang.Thread.sleep(Native Method)\r\n	at com.zhisheng.thread.thread1.MyThread2.run(MyThread2.java:12)\r\n```\r\n\r\nFrom the results of the run, if you stop a thread in the sleep state, it goes to the catch statement and clears the stop state value to false.\r\n\r\n#### sleeping in stop\r\n\r\n``` java\r\npublic class MyThread3 extends Thread\r\n{\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            System.out.println(\"run start\");\r\n            Thread.sleep(20000);\r\n            System.out.println(\"run end\");\r\n        } catch (InterruptedException e) {\r\n            System.out.println(\"run catch \"+this.isInterrupted());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n            MyThread3 t3 = new MyThread3();\r\n            t3.start();\r\n            t3.interrupt();\r\n    }\r\n}\r\n```\r\n\r\nRun the result.\r\n\r\n```java\r\nrun start\r\nrun catch false\r\njava.lang.InterruptedException: sleep interrupted\r\n	at java.lang.Thread.sleep(Native Method)\r\n	at com.zhisheng.thread.thread1.MyThread3.run(MyThread3.java:12)\r\n```\r\n\r\n#### threads that can be stopped - brute force stopping\r\n\r\nStop the thread using the stop() method\r\n\r\n### Suspend a thread\r\n\r\nA thread can be suspended using the suspend method and resumed using the resume() method.\r\n\r\n#### Use of the suspend and resume methods\r\n\r\n```java\r\npublic class MyThread4 extends Thread\r\n{\r\n    private int i;\r\n    public int getI() {\r\n        return i;\r\n    }\r\n     macos/deepLFree.translatedWithDeepL.text', 1, 'post', 'publish', 'Java', 'Java', 384, 375, 1, 1, 1);
INSERT INTO `t_contents`(`cid`, `title`, `slug`, `created`, `modified`, `content`, `author_id`, `type`, `status`, `tags`, `categories`, `hits`, `comments_num`, `allow_comment`, `allow_ping`, `allow_feed`) VALUES (3, 'Study Notes and Summary of Core Techniques of Multithreaded Programming in Java', 'Java-Thread', 1497322995, 1609108101, '## Chapter 1 - Java Multithreading Skills\r\n\r\nThreads Technical Points.\r\n\r\n+ Starting a thread\r\n+ How to make a thread pause\r\n+ How to stop a thread\r\n+ The priority of threads\r\n+ Thread safety related issues\r\n<! -- more -->\r\n### The concept of processes and threads and the advantages of multi-threading\r\n\r\nProcesses: like the QQ.exe program that runs on our computers, are the basic unit of operation managed by the operating system\r\n\r\nThreads: Sub-tasks that run independently within a process, for example, the QQ.exe process has many threads running, downloading files, sending messages, voice threads, video threads, etc.\r\n\r\nAdvantages of multithreading: our computer can operate different software at the same time, while listening to songs, knocking out code, viewing pdf documents, browsing the web, etc. The CPU keeps switching between these tasks, switching very quickly, so we think they are running at the same time.\r\n\r\n### Using multithreading\r\n\r\n#### Inherits the Thread class\r\n\r\nThe JDK source code comments (Thread.java) are as follows.\r\n\r\n```java\r\nOne is to declare a class to be a subclass (subclass) of <code>Thread</code>. This subclass should override the <code>run</code> method of class <code>Thread</code>. An instance of the subclass can then be allocated and started.\r\nFor example, a thread that computes primes larger than a stated value could be written as follows:\r\n//Inherit the Thread class\r\nclass PrimeThread extends Thread {\r\n         long minPrime;\r\n         PrimeThread(long minPrime) {\r\n          this.minPrime = minPrime;\r\n         }\r\n\r\n         public void run() {\r\n             // compute primes larger than minPrime\r\n             Override the run method of the Thread class\r\n          }\r\n     }\r\n\r\nThe following code would then create a thread and start it running:\r\n// start the thread\r\n    PrimeThread p = new PrimeThread(143);\r\n    p.start();\r\n```\r\n\r\n#### Implementing the Runnable interface\r\n\r\nThe JDK source code comments (Thread.java) are as follows\r\n\r\n```java\r\nThe other way to create a thread is to declare a class that implements the <code>Runnable</code> interface. that class then An instance of the class can then be allocated, passed as an argument when creating\r\n<The same example in this other style looks like the following:\r\n// Implementing the Runnable interface\r\n    class PrimeRun implements Runnable {\r\n        long minPrime;\r\n        PrimeRun(long minPrime) {\r\n            this.minPrime = minPrime;\r\n         }\r\n\r\n         public void run() {\r\n            // compute primes larger than minPrime\r\n            // override the run method\r\n        }\r\n    }\r\n\r\nThe following code would then create a thread and start it running:\r\n// start the thread\r\n     PrimeRun p = new PrimeRun(143);\r\n     new Thread(p).start();\r\n```\r\n\r\n\r\n\r\n### currentThread() method\r\n\r\nThis method returns information about which thread the code segment is being called by.\r\n\r\n### isAlive() method\r\n\r\nDetermines if the current thread is active (started but not terminated)\r\n\r\n### sleep() method\r\n\r\nSleeps (suspends) the current \"active thread (the thread returned by this.currentThread())\" for the specified number of milliseconds.\r\n\r\n### getId() method\r\n\r\nGets the thread\'s unique identifier\r\n\r\n### Stopping a thread\r\n\r\nThe <del>Thread.stop()</del> method can be used, but it is best not to use it as it is unsafe and is deprecated.\r\n\r\nMost stopping a thread is done using the Thread.interrupt() method\r\n\r\n#### determines if the thread is stopped\r\n\r\n+ interrupted()\r\n```java\r\n     // Test if the current thread has been interrupted, the interrupted state of this thread will be cleared by this method.\r\n     //In other words, if this method is called twice in a row, the second time it is called will return false.\r\n     public static boolean interrupted() {\r\n             return currentThread().isInterrupted(true);\r\n     }\r\n```\r\n\r\n+ isInterrupted()\r\n\r\n``` java\r\n        //test if the thread has been interrupted, the state of the thread is not affected by this method\r\n        // Thread interruptions are ignored because threads that are not active under interruption are reflected by this method which returns false\r\n         public boolean isInterrupted() {\r\n                return isInterrupted(false);\r\n        }\r\n        /**\r\n     * Tests if some Thread has been interrupted. the interrupted state\r\n     The interrupted state * is reset or not based on the value of ClearInterrupted that is\r\n     * passed.\r\n     The interrupted state * is reset or not based on the value of ClearInterrupted that is * passed. */\r\n     private native boolean isInterrupted(boolean ClearInterrupted);\r\n```\r\n\r\n#### stopping in slumber\r\n\r\n``` java\r\npublic class MyThread2 extends Thread\r\n{\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            System.out.println(\"run start\");\r\n            Thread.sleep(20000);\r\n            System.out.println(\"run end\");\r\n        } catch (InterruptedException e) {\r\n            System.out.println(\"run catch \"+this.isInterrupted());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        try {\r\n            MyThread2 t2 = new MyThread2();\r\n            t2.start();\r\n            Thread.sleep(200);\r\n            t2.interrupt();\r\n        } catch (InterruptedException e) {\r\n            System.out.println(\"main catch\");\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println(\"main end\");\r\n    }\r\n}\r\n```\r\n\r\nRun the result.\r\n\r\n```java\r\nrun start\r\nmain end\r\nrun catch false\r\njava.lang.InterruptedException: sleep interrupted\r\n	at java.lang.Thread.sleep(Native Method)\r\n	at com.zhisheng.thread.thread1.MyThread2.run(MyThread2.java:12)\r\n```\r\n\r\nFrom the results of the run, if you stop a thread in the sleep state, it goes to the catch statement and clears the stop state value to false.\r\n\r\n#### sleeping in stop\r\n\r\n``` java\r\npublic class MyThread3 extends Thread\r\n{\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            System.out.println(\"run start\");\r\n            Thread.sleep(20000);\r\n            System.out.println(\"run end\");\r\n        } catch (InterruptedException e) {\r\n            System.out.println(\"run catch \"+this.isInterrupted());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n            MyThread3 t3 = new MyThread3();\r\n            t3.start();\r\n            t3.interrupt();\r\n    }\r\n}\r\n```\r\n\r\nRun the result.\r\n\r\n```java\r\nrun start\r\nrun catch false\r\njava.lang.InterruptedException: sleep interrupted\r\n	at java.lang.Thread.sleep(Native Method)\r\n	at com.zhisheng.thread.thread1.MyThread3.run(MyThread3.java:12)\r\n```\r\n\r\n#### threads that can be stopped - brute force stopping\r\n\r\nStop the thread using the stop() method\r\n\r\n### Suspend a thread\r\n\r\nA thread can be suspended using the suspend method and resumed using the resume() method.\r\n\r\n#### Use of the suspend and resume methods\r\n\r\n```java\r\npublic class MyThread4 extends Thread\r\n{\r\n    private int i;\r\n    public int getI() {\r\n        return i;\r\n    }\r\n     macos/deepLFree.translatedWithDeepL.text', 1, 'post', 'publish', 'Java', 'Java', 9, 0, 1, 1, 1);
INSERT INTO `t_contents`(`cid`, `title`, `slug`, `created`, `modified`, `content`, `author_id`, `type`, `status`, `tags`, `categories`, `hits`, `comments_num`, `allow_comment`, `allow_ping`, `allow_feed`) VALUES (4, 'Comparison of HashMap, Hashtable, HashSet and ConcurrentHashMap', 'HashMap-HashTable', 1497323623, 1609107890, 'The comparison of HashMap and Hashtable is a common question in Java interviews, testing the programmer\'s ability to use collection classes correctly and to improvise and use multiple ideas to solve problems. Hashtable is an obsolete collection class that has been around for a long time in the Java API. Hashtable and HashMap are quite easy to ask in Java interviews and have even become the most frequently asked collection framework interview questions, so don\'t forget to prepare for this question before taking any Java interviews. Don\'t forget to prepare for this question before taking any Java interview.\r\n<! -- more -->\r\nIn this article we will see not only the differences between HashMap and Hashtable, but also the similarities between them.\r\n\r\n### Differences between HashMap and Hashtable\r\n\r\nBoth HashMap and Hashtable implement the Map interface, but it is important to understand the differences before deciding which one to use. The main differences are: thread safety, synchronization, and speed. 1.\r\n\r\n1. HashMap is almost equivalent to Hashtable, except that HashMap is non-synchronized and can accept null (HashMap can accept key and value as null, whereas Hashtable cannot). 2.\r\n2. HashMap is non-synchronized while Hashtable is synchronized, which means that Hashtable is thread-safe and multiple threads can share a Hashtable, whereas multiple threads cannot share a HashMap without proper synchronization. Java 5 provides ConcurrentHashMap, which is an alternative to HashTable and scales better than HashTable. 3.\r\nAnother difference is that the Iterator of a HashMap is a fail-fast iterator, whereas the enumerator of a Hashtable is not fail-fast. So when another thread changes the structure of a HashMap (adding or removing elements), a ConcurrentModificationException will be thrown, but the remove() method of the iterator itself will not throw a ConcurrentModificationException if it removes elements. exception. This is also the difference between Enumeration and Iterato r. 4.\r\n4. Since Hashtable is thread-safe and also synchronized, it is slower than HashMap in a single-threaded environment. If you don\'t need synchronization and only need a single thread, then using HashMap is better than Hashtable. 5.\r\nHashMap does not guarantee that the order of the elements in a Map will remain the same over time.\r\n\r\n### Some important terms to note.\r\n\r\n1) sychronized means that only one thread can change the Hashtable at a time, meaning that any thread that wants to update the Hashtable must first obtain a synchronized lock, and other threads must wait until the synchronized lock is released before they can obtain it again.\r\n\r\n2) Fail-safe is related to the iterator iterator. If an Iterator or ListIterator is created for a collection object, and another thread tries to \"structurally\" change the collection object, a ConcurrentModificationException will be thrown. However, it is permissible for other threads to change the collection object via the set() method, as this does not \"structurally\" change the collection. However, if the set() method is called after structural changes have been made, an IllegalArgumentException will be thrown.\r\n\r\n3) A structural change is the removal or insertion of an element, which affects the structure of the map.\r\n\r\n### Can we synchronise a HashMap?\r\n\r\nA HashMap can be synchronised with the following statement.\r\nMap m = Collections.synchronizeMap(hashMap);\r\n\r\n### Conclusion\r\n\r\nThere are a few key differences between Hashtable and HashMap: thread safety and speed. Use Hashtable only if you need full thread safety, and if you are using Java 5 or above, use ConcurrentHashMap.\r\n\r\nRetrieved from: [The difference between HashMap and Hashtable](http://www.importnew.com/7010.html)\r\n\r\n***\r\n\r\nOn the point that HashMap threads are not safe, the book \"The Art of Concurrent Programming in Java\" has this to say.\r\n\r\n> HashMap causes dead loops when concurrently executing put operations, resulting in CPU utilization close to 100%. This is because multiple threads cause the Node table of a HashMap to form a ring data structure. Once the ring data structure is formed, the next node of the Node is never empty, and a dead loop is created when the Node is fetched.\r\n\r\nCause.\r\n\r\n+ [Vaccine: Dead Loop in JAVA HASHMAP -- Cool Shell](http://coolshell.cn/articles/9606.html)\r\n+ [How does a HashMap dead-loop occur in java concurrency](http://firezhfox.iteye.com/blog/2241043)\r\n+ [How does a HashMap work in JAVA](http://coding-geek.com/how-does-a-hashmap-work-in-java/)\r\n\r\n***\r\n\r\nThe following is documented in your own notes on the Tao.\r\n\r\n**HashMap, HashTable and HashSet Differences** 1.\r\n\r\n1. Some statements about HashMap.\r\n\r\na) HashMap is actually a \"linked hash\" data structure, i.e. a combination of an array and a linked table. the underlying structure of HashMap is an array, and each item in the array is a linked table.\r\n\r\nb) The instance of a HashMap has two parameters that affect its performance: the \"initial capacity\" and the fill factor.\r\n\r\nc) The HashMap implementation is not synchronous and is not thread-safe.  HashTable is thread-safe.\r\n\r\nd) The key-value in a HashMap is stored in the Entry.\r\n\r\ne) HashMap can store null keys and null values, and does not guarantee that the order of the elements is constant.\r\n\r\nf) There are three main methods for resolving conflicts: addressing, zipping and re-hashing.\r\n\r\nNote: the chain method is to form a chain of objects with the same hash value in the slot corresponding to the hash value.\r\n\r\nOpen addressing is used to resolve conflicts by forming a sequence of probes in the hash table when a conflict occurs, using some probing (also called detection) technique. This sequence is followed cell by cell until a given keyword is found, or until an open address is encountered (i.e. the address cell is empty) (for insertion, the new node to be inserted can be stored in the address cell when an open address is probed).\r\n\r\nThe chain-pulling method resolves conflicts by linking all nodes whose keywords are synonymous in the same single chain table . If the length of the selected hash table is m, the hash table can be defined as an array T[0..m-1] of m head pointers. Any node with hash address i is inserted into a single chained table with T[i] as the head pointer. the initial value of each component in T should be a null pointer. In the zip method, the filling factor α can be greater than 1, but α is generally taken to be ≤ 1. The zip method is suitable for elements of unspecified size.\r\n\r\n   \r\n\r\n2. Differences between Hashtable and HashMap.\r\n\r\na) Inheritance is different.\r\n\r\n public class Hashtable extends Dictionary implements Map\r\n\r\npublic class HashMap extends AbstractMap implements Map\r\n\r\nb) The methods in Hashtable are synchronous, whereas the methods in HashMap are, by default, asynchronous. In a multi-threaded concurrent environment, you can use Hashtable directly, but if you want to use HashMap, you have to add your own synchronization process.\r\n\r\nc) In a Hashtable, null values are not allowed for both key and value. In a HashMap, null can be used as a key, and there is only one such key; there can be one or more keys with a null value. When the get() method returns a null value, it means either that there is no key in the HashMap, or that the value corresponding to the key is null. Therefore, in a HashMap, you cannot use the get() method to determine whether a key exists in the HashMap, but should use the containsKey() method to determine it.\r\n\r\nd) The internal implementation of the two traversal methods is different; Hashtable and HashMap both use Iterator, and for historical reasons, Hashtable also uses Enumeration.\r\n\r\ne) The use of hash values differs in that HashTable uses the hashCode of the object directly, while HashMap recalculates the hash value.\r\n\r\nf) Hashtable and HashMap have two internal implementations of the initial size and expansion of arrays. the default size of the hash array in HashTable is 11, which is increased by old*2+1. the default size of the hash array in HashMap is 16, which must be an index of 2.\r\n\r\nNote: HashSet subclasses rely on the hashCode() and equal() methods to distinguish between duplicate elements.\r\n\r\nA HashSet uses a Map to store data internally, i.e. the data of the HashSet is stored as the key value of the Map, which is why the elements of a HashSet cannot be duplicated. This is the reason why elements in a HashSet cannot be duplicated. The Map, which holds the key value, determines whether the current Map contains the Key object by first using the hashCode of the key, and then using the equals method to determine whether the key is the same.\r\n\r\n***\r\n\r\nHow HashMap works\r\n\r\nHow HashMap works is a common Java interview question in recent years. Almost every Java programmer knows about HashMap, knows where to use it, and knows the difference between Hashtable and HashMap, so why is this interview question so special? It\'s because the depth of this question is very deep. This question often appears in senior or intermediate to senior interviews. Investment banks prefer to ask this question and may even ask you to implement a HashMap to test your programming skills, which is made more complex by the introduction of ConcurrentHashMap and other synchronous collections. Let\'s start the journey of discovery!\r\n\r\n### Let\'s start with some simple questions\r\n\r\n**\"Have you ever used a HashMap?\" \"What is a HashMap and why do you use it?\" **\r\n\r\nAlmost everyone will answer \"yes\" and then answer some of the features of HashMap, such as HashMap can accept null keys and values, whereas Hashtable cannot; HashMap is non-synchronized; HashMap is fast; and HashMap stores key-value pairs, etc. This shows that you have used HashMap and are quite familiar with it. But the interviewer takes a sharp turn and starts asking tough questions from this point on, asking more basic details about HashMap. The interviewer may ask questions such as.\r\n\r\n**\"Do you know how a HashMap works?\" \"Do you know how the get() method of a HashMap works?\" **\r\n\r\nYou might answer \"I haven\'t checked the standard Java API in detail, you can look at the Java source code or Open JDK.\" \"I can find the answer using Google.\"\r\n\r\nBut some interviewers may be able to give the answer, \"HashMap is based on the principle of hashing, we use put(key, value) to store objects in the HashMap and get(key) to retrieve objects from the HashMap. When we pass keys and values to the put() method, we first call the hashCode() method on the keys, and the returned hashCode is used to find the bucket location to store the Entry object.\" The key point here is to point out that the HashMap is storing the key in the bucket macos/deepLFree.translatedWithDeepL.text', 1, 'post', 'publish', 'Java,HashMap,HashTable,HashSet,ConcurrentHashMap', 'Java', 363, 360, 1, 1, 1);
INSERT INTO `t_contents`(`cid`, `title`, `slug`, `created`, `modified`, `content`, `author_id`, `type`, `status`, `tags`, `categories`, `hits`, `comments_num`, `allow_comment`, `allow_ping`, `allow_feed`) VALUES (5, 'Pyspider Framework -- Python crawler for crawling V2EX website posts', 'Pyspider-v2ex', 1497323771, 1609107841, '**Background:**\r\n\r\n**PySpider**: a powerful web crawler with a powerful WebUI written in Python, distributed architecture, support for multiple database backends, powerful WebUI support for script editor, task monitor, project manager and result viewer. Online example: **http://demo.pyspider.org/**\r\n\r\n**Official documentation : http://docs.pyspider.org/en/latest/** \r\n\r\n**Github : https://github.com/binux/pyspider** \r\n\r\nThis article crawls the code Github address : **https://github.com/zhisheng17/Python-Projects/blob/master/v2ex/V2EX.py**\r\n\r\n<! -- more -->\r\n\r\n***\r\n\r\nWith all that said, let\'s get to the main text!\r\n\r\n**Prerequisites:** You already have Pyspider and MySQL-python installed (save data)\r\n\r\nIf you haven\'t installed them yet, please take a look at my previous article to prevent you from going down the wrong path as well.\r\n\r\n1. [**Some pitfalls I\'ve walked through while learning the Pyspider framework**](http://blog.csdn.net/tzs_1041218129/article/details/52877949)\r\n\r\n2. [**HTTP 599: SSL certificate problem: unable to get local issuer certificate error**](http://blog.csdn.net/tzs_1041218129/article/ details/52853465)\r\n\r\nSome of the errors I have encountered.\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022201123063)\r\n\r\n\r\nFirst, **the goal of this crawler**: to crawl the [V2EX](www.v2ex.com) website for questions and content in posts using the Pyspider framework, and then save the crawled data locally.\r\n\r\nMost of the posts on V2EX can be viewed without logging in, but there are some posts that require logging in to view. (I didn\'t think it was necessary to use cookies, but if you have to log in, it\'s easy to do so by adding a cookie to your login.\r\n\r\nWe scanned through https://www.v2ex.com/ and found that there wasn\'t a list that contained all the posts, so we had to take the next best thing and traverse through all the posts by grabbing all the tag list pages under the categories: https://www.v2ex.com/?tab=tech and then https://www .v2ex.com/go/programmer Finally the address for each post\'s details is (for example): https://www.v2ex.com/t/314683#reply1\r\n\r\n\r\n\r\n**Create a project**\r\n\r\nIn the bottom right corner of the pyspider dashboard, click on the \"Create\" button\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022193415047)\r\n\r\nReplace the URL of the on_start function\'s self.crawl with.\r\n\r\n```\r\n@every(minutes=24 * 60)\r\n    def on_start(self):\r\n        self.crawl(\'https://www.v2ex.com/\', callback=self.index_page, validate_cert=False)\r\n```\r\n\r\n> + self.crawl tells pyspider to crawl the specified page and then parse the result using the callback function.\r\n> + @every) modifier to say that on_start will be executed once a day so that it crawls the latest posts.\r\n> + validate_cert=False must be the case, otherwise it will report HTTP 599: SSL certificate problem: unable to get local issuer certificate error\r\n\r\n**Home:**\r\n\r\nClick on the green run to execute and you will see a red 1 above follows, switch to the follows panel and click on the green play button: !\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022194343052)\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022194412365)\r\n\r\nThe second screenshot had this problem at first, see the previous article for the solution, and then the problem stopped appearing.\r\n\r\n<br\r\n**Tab list page : **\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022194637692)\r\n\r\nIn the tab list page, we need to extract the URLs of all the topic list pages. as you may have noticed, the sample handler already extracts a very large number of URLs\r\n\r\ncode.\r\n```\r\n@config(age=10 * 24 * 60 * 60)\r\n    def index_page(self, response):\r\n        for each in response.doc(\'a[href^=\"https://www.v2ex.com/?tab=\"]\').items():\r\n            self.crawl(each.attr.href, callback=self.tab_page, validate_cert=False)\r\n```\r\n\r\n> + Since the post list page and the tab list page are not the same length, a new callback is created here for self.tab_page\r\n> + @config(age=10 * 24 * 60 * 60) where we assume that the page will be valid for 10 days and will not be crawled again\r\n\r\n\r\n**Go list page : **\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022195235290)\r\n\r\nCode.\r\n\r\n```\r\n@config(age=10 * 24 * 60 * 60)\r\n    def tab_page(self, response):\r\n        for each in response.doc(\'a[href^=\"https://www.v2ex.com/go/\"]\').items():\r\n            self.crawl(each.attr.href, callback=self.board_page, validate_cert=False)\r\n```\r\n\r\n**Post detail page (T):**\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022200023793)\r\n\r\nYou can see some REPLY stuff appearing inside the result, for these we can do without and we can remove them.\r\n\r\nAlso we need to make him implement the automatic page turn function by himself.\r\n\r\nCode.\r\n```\r\n@config(age=10 * 24 * 60 * 60)\r\n    def board_page(self, response):\r\n        for each in response.doc(\'a[href^=\"https://www.v2ex.com/t/\"]\').items():\r\n            url = each.attr.href\r\n            if url.find(\'#reply\') > 0:\r\n                url = url[0:url.find(\'#\')]\r\n            self.crawl(url, callback=self.detail_page, validate_cert=False)\r\n        for each in response.doc(\'a.page_normal\').items():\r\n            self.crawl(each.attr.href, callback=self.board_page, validate_cert=False) # implement auto-page function\r\n```\r\n\r\nScreenshot of the run after removing.\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022200324719)\r\n\r\nScreenshot after implementing automatic page turning: !\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022201355970)\r\n\r\nAt this point we have matched the URLs of all the posts.\r\n\r\nClick on the button after each post to see the details of the post.\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022200539973)\r\n\r\nCode.\r\n\r\n```\r\n@config(priority=2)\r\n    def detail_page(self, response):\r\n        title = response.doc(\'h1\').text()\r\n        content = response.doc(\'div.topic_content\').html().replace(\'\"\', \'\\\\\"\')\r\n        self.add_question(title, content) #insert into database\r\n        return {\r\n            \"url\": response.url,\r\n            \"title\": title,\r\n            \"content\": content,\r\n        }\r\n```\r\n\r\nTo insert into the database, we need to define an add_question function before.\r\n\r\n```\r\n# Connect to the database\r\ndef __init__(self):\r\n        self.db = MySQLdb.connect(\'localhost\', \'root\', \'root\', \'wenda\', charset=\'utf8\')\r\n\r\n    def add_question(self, title, content):\r\n        try:\r\n            cursor = self.db.cursor()\r\n            sql = \'insert into question(title, content, user_id, created_date, comment_count) values (\"%s\", \"%s\", %d, %s, 0)\' % (title, content, random.randint(1, 10) , \'now()\'); # SQL statement to insert into the database\r\n            print sql\r\n            cursor.execute(sql)\r\n            print cursor.lastrowid\r\n            self.db.commit()\r\n        except Exception, e:\r\n            print e\r\n            self.db.rollback()\r\n```\r\n\r\nTo view the results of the crawler run.\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022201700801)\r\n\r\n> 1. debug first, then set to running. pyspider framework bugs on windows\r\n> 2. set the running speed, it is recommended not to run too fast, otherwise it will easily be found to be a crawler, and people will block your IP\r\n> 3. check the running job\r\n> 4. check the crawled content\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022202033227)\r\n\r\n! [write image description here](http://img.blog.csdn.net/20161022202048258)\r\n\r\nThen this macos/deepLFree.translatedWithDeepL.text', 1, 'post', 'publish', 'Pyspider,Python,爬虫', 'Python', 388, 359, 1, 1, 1);
INSERT INTO `t_contents`(`cid`, `title`, `slug`, `created`, `modified`, `content`, `author_id`, `type`, `status`, `tags`, `categories`, `hits`, `comments_num`, `allow_comment`, `allow_ping`, `allow_feed`) VALUES (6, '16 Lessons in Java Madness for Breaking Through to Basic Programmer Skills', 'Java-16-lession', 1497325618, 1609107793, '## Lesson 1 - Arrays and Memory Control\r\n\r\n### Array initialisation\r\n\r\nAfter an array is initialized, the length of the array is immutable (the length of the array can be accessed via the length property of the array.) Arrays in Java must be initialized (memory space allocated for the elements of the array object and initial values assigned to each array element) before they can be used.\r\n\r\nArray initialisation takes the form of\r\n\r\n+ Static initialisation: initialisation is done by specifying the initial value of each array as displayed by the programmer, and the system determines the length of the array.\r\n+ Dynamic initialisation: initialisation where the programmer specifies only the length of the array and the system assigns initial values to the array elements.\r\n\r\n<! -- more -->\r\n### Using arrays\r\n\r\nArray elements are variables: for example int[] array elements are equivalent to variables of type int\r\n\r\nWhen using an array element by indexing (accessing the value of an array element, assigning a value to an array element), the array element is used as if it were a normal variable.\r\n\r\n\r\n\r\n## Lesson 2 - Controlling Objects and Memory\r\n\r\nJava memory management is divided into: memory allocation and memory reclamation.\r\n\r\n> + Memory allocation: The amount of memory space in heap memory allocated by the JVM for a Java object when it is created.\r\n> + memory reclamation: when a Java object loses its reference and becomes rubbish, the JVM\'s rubbish collection mechanism automatically cleans up the object and reclaims memory\r\n\r\n### Instance variables and class variables\r\n\r\n#### Local variables\r\n\r\nFeatures: short-lived, stored in the method\'s stack memory\r\n\r\nTypes.\r\n\r\n+ formal reference: local variables defined in the method signature, which are assigned a value by the method caller and die out at the end of the method\r\n+ local variables within a method: local variables defined within a method, which must be initialised on display within the method, take effect from the time of initialisation and die out at the end of the method\r\n+ local variables within a block: local variables defined within a block must be initialised for display within the block, effective from initialisation and extinguished at the end of the block\r\n\r\n#### Member variables\r\n\r\nA variable defined within a class is also referred to as a non-static or instance variable if the member variable is not modified with static, or as a static or class variable if it is modified with static.\r\n\r\n#### Properties of instance and class variables\r\n\r\nMember variables that are modified with static are class variables and belong to the class itself, while member variables that are not modified with static are instance variables and belong to instances of the class.\r\n\r\nSince each class within the same JVM corresponds to only one CLass object, the class variables of a class within the same JVM require only one block of memory space; however, for instance variables, each time an instance of the class is created, a block of memory space needs to be allocated for that instance variable. In other words, as many instances are created in the program, the instance variables will need a few blocks of memory space.\r\n\r\nAn interview question comes to mind here.\r\n\r\n```java\r\npublic class A{\r\n  {\r\n    System.out.println(\"I am the code block\");\r\n  }\r\n  static{\r\n    System.out.println(\"I am a static block of code\");\r\n  }\r\n  public static void main(String[] args) {\r\n        A a = new A();\r\n        A a1 = new A();\r\n    }\r\n}\r\n```\r\n\r\nResult.\r\n\r\n```\r\nI\'m a static block of code\r\nI am code block\r\nI am code block\r\n```\r\n\r\nStatic code blocks are executed only once, while code blocks are printed once for each instance created.\r\n\r\n#### Timing of initialisation of instance variables\r\n\r\nThere are 3 places where a program can perform initialisation of instance variables.\r\n\r\n+ the initial value is specified when defining the instance variable\r\n+ the initial value is specified for the instance variable in the non-static initialisation block\r\n+ in the constructor when specifying the initial value of the instance variable\r\n\r\nThe first and second ways above are executed earlier than the third way, but the first and second ways are executed in the same order as they are listed in the source program.\r\n\r\nAgain adding a member variable of variable weight to that code above, let\'s verify the order of initialisation above.\r\n\r\n1. ``Define instance variables to specify initial values`` after the ``Non-static initialization block specifies initial values for instance variables``:\r\n\r\n```java\r\npublic class A{\r\n    {\r\n        weight = 2.1;\r\n        System.out.println(\"I am the code block\");\r\n    }\r\n    double weight = 2.0;\r\n    static{\r\n        System.out.println(\"I am a static block of code\");\r\n    }\r\n    public static void main(String[] args) {\r\n        A a = new A();\r\n        A a1 = new A();\r\n        System.out.println(a.weight);\r\n    }\r\n}\r\n```\r\n\r\nThe result is.\r\n\r\n```\r\nI\'m a static block of code\r\nI am code block\r\nI am code block\r\n2.0\r\n```\r\n\r\n2. ``Define instance variables to specify initial values`` before ``Non-static initialization blocks specify initial values for instance variables``:\r\n\r\n``` java\r\npublic class A{\r\n	double weight = 2.0;\r\n    {\r\n        weight = 2.1;\r\n        System.out.println(\"I am the code block\");\r\n    }\r\n    static{\r\n        System.out.println(\"I am a static block of code\");\r\n    }\r\n    public static void main(String[] args) {\r\n        A a = new A();\r\n        A a1 = new A();\r\n        System.out.println(a.weight);\r\n    }\r\n}\r\n```\r\n\r\nThe result is.\r\n\r\n```\r\nI am a static code block\r\nI am code block\r\nI am the code block\r\n2.1\r\n```\r\n\r\nDoes this seem strange to anyone?\r\n\r\nLet me make it clear.\r\n\r\n> The initial value specified when defining the instance variable, and the statement in the initial block that specifies the initial value for the instance variable are on equal footing, and when processed by the compiler, they will both be extracted into the constructor. That is, the statement `double weight = 2.0;` will actually be split into 2 executions as follows.\r\n>\r\n> + `double weight;` : The system allocates memory for the Java object based on this statement when it is created.\r\n> + `weight = 2.1;` : This statement will be extracted and executed in the constructor of the Java class.\r\n\r\nI\'m sure you won\'t believe me if I just talk about the principle, so is there any source code you can show so that it\'s convincing? Is that right?\r\n\r\nHere I have used software to decompile the bytecode file of the code directly to see how it is composed?\r\n\r\nThe decompiled source code for the first code is as follows.\r\n\r\n```java\r\npublic class A\r\n{\r\n  double weight;\r\n  public A()\r\n  {\r\n    this.weight = 2.1D;\r\n    System.out.println(\"I am the code block\");\r\n    this.weight = 2.0D;\r\n  }\r\n  static\r\n  {\r\n    System.out.println(\"I am a static block\");\r\n  }\r\n  public static void main(String[] args)\r\n  {\r\n    A a = new A();\r\n    A a1 = new A();\r\n    System.out.println(a.weight);\r\n  }\r\n}\r\n```\r\n\r\nThe second code decompiles the source code as follows.\r\n\r\n``` java\r\npublic class A\r\n{\r\n  double weight;\r\n  public A()\r\n  {\r\n    this.weight = 2.0D;\r\n    this.weight = 2.1D;\r\n    System.out.println(\"I am the code block\");\r\n  }\r\n  static\r\n  {\r\n    System.out.println(\"I am a static block\");\r\n  }\r\n  public static void main(String[] args)\r\n  {\r\n    A a = new A();\r\n    A a1 = new A();\r\n    System.out.println(a.weight);\r\n  }\r\n}\r\n```\r\n\r\nNow you\'re satisfied!\r\n\r\nThe decompiled source code shows that the weight instance variable defined for this class no longer has an initial value, and the code specifying the initial value for weight has been referred to the constructor, but we can also see that the previous rules are also satisfied.\r\n\r\nTheir assignment statements are merged into the constructor. During the merging process, the assignment statements resulting from the conversion of the defined variable statements and the assignment statements resulting from the conversion of the statements in the initial code block always precede all the statements in the constructor, and the order of the two assignment statements remains the same as in the Java source code after the merging.\r\n\r\nDo you understand the general process? If you are not sure, it is advisable to run through the process yourself on your own computer, after all, it is not a matter of practice.\r\n\r\n#### Timing of initialisation of class variables\r\n\r\nThe JVM only initialises each Java class once, so each time a Java program is run, the system only allocates memory space for class variables and performs initialisation once. Programs can perform initialisation of class variables in two places.\r\n\r\n+ initial values specified when defining class variables\r\n+ specifying the initial value for the class variable in the static initialisation block\r\n\r\nThese two methods are executed in the same order as they are listed in the source code.\r\n\r\nUsing the same example as above, we add to it the variable height modified by static: 1.\r\n\r\n1. ``Specifying initial values when defining class variables`` After specifying initial values for class variables in the ``static initialisation block``.\r\n\r\n```java\r\npublic class A{\r\n    double weight = 2.0;\r\n    {\r\n        weight = 2.1;\r\n        System.out.println(\"I am the code block\");\r\n    }\r\n    static{\r\n        height = 10.1;\r\n        System.out.println(\"I am a static block\");\r\n    }\r\n    static double height = 10.0;\r\n    public static void main(String[] args) {\r\n        A a = new A();\r\n        A a1 = new A();\r\n        System.out.println(a.weight);\r\n        System.out.println(height);\r\n    }\r\n}\r\n```\r\n\r\nResults of running.\r\n\r\n```\r\nI\'m a static block of code\r\nI am code block\r\nI am the code block\r\n2.1\r\n10.0\r\n```\r\n\r\n2. ``Specifying initial values when defining class variables`` Before specifying initial values for class variables in a ``static initialization code block``.\r\n\r\n``` java\r\npublic class A{\r\n    static double height = 10.0;\r\n    double weight = 2.0;\r\n    {\r\n        weight = 2.1;\r\n        System.out.println(\"I am the code block\");\r\n    }\r\n    static{\r\n        height = 10.1;\r\n        System.out.println(\"I am a static block\");\r\n    }\r\n    public static void main(String[] args) {\r\n        A a = new A();\r\n        A a1 = new A();\r\n        System.out.println(a.weight);\r\n        System.out.println(height);\r\n    }\r\n}\r\n```\r\n\r\nResults of running.\r\n\r\n```\r\nI\'m a static block of code\r\nI am code block\r\nI am the code block\r\n2.1\r\n10.1\r\n```\r\n\r\nIt runs as we expected, but let\'s look at the decompiled code!\r\n\r\nThe decompiled code in the first case.\r\n\r\n``` java\r\npublic class A\r\n{\r\n  double weight;\r\n  public A()\r\n  {\r\n    this.weight = 2.0D;\r\n\r\n    this.weight = 2.1D;\r\n    System.out.println(\"I am the code block\");\r\n  }\r\n  stati macos/deepLFree.translatedWithDeepL.text', 1, 'post', 'publish', 'Java', 'Java', 303, 280, 1, 1, 1);
